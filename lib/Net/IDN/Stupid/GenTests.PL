#!/usr/bin/perl

use strict;
use utf8;
use warnings;

our $SRC = "data/NormalizationTest.txt";
open NormalizationTest, '<', $SRC || die "cannot open $SRC: $!";
binmode NormalizationTest, ':utf8';

my $part = 0;
f($part);

my $line = 0;
while(<NormalizationTest>) {
  chomp; ++$line;
  s/\s*#\s*(.*)//; my $com = $1;
  next if !m/\S/; 

  if(m/^\@/) { f($part++); next; };

  my @c = ($line, split /;/);
  foreach(@c) { s/^\s+//; s/\s+$//; };

  $com .= " [$SRC:$line]";
  w($c[1], $c[2], "$com c2 == NFC(c1))");
  w($c[2], $c[2], "$com c2 == NFC(c2))");
  w($c[3], $c[2], "$com c2 == NFC(c3))");

  ## w($c[4], $c[4], "$com c4 == NFC(c4))");
  ## w($c[5], $c[4], "$com c4 == NFC(c5))");
}
f(undef);
exit(0);

sub w {
  my($s, $d, $c) = @_;

  #print "TODO: { local \$TODO = 'HANGUL not implemented'; " if $c =~ m/hangul/i;

  printf "is(_(lcNFC(\"%s\")),\t_(lc(\"%s\")),\t\"%s\");",
    _($s), _($d), quotemeta($c);

  #print "}" if $c =~ m/hangul/i;

  print "\n";
}

sub _ {
  return join '', map { "\\x{$_}" }
    split /\s+/, shift;
}

my $cur_part;

sub f {
  my $part = shift;

if(defined $cur_part) {
  return if defined $part and $cur_part == $part;
  print <<__EOF;
done_testing();
exit(0);

sub _{ return shift; return join ' ', map {sprintf '%04X', ord \$_} split //, shift}
__END__
__EOF
  close STDOUT;
}
 
  if(defined $part) {
    my $fn = "t/stupid_nfc-p$part.t";
    print STDERR "generating $fn\n" if -t STDERR;

    open STDOUT, ">", $fn || die "cannot open '$fn': $!";
    binmode STDOUT, ":utf8";

    print <<__EOF;
# *** DO NOT EDIT *** generated file *** DO NOT EDIT ***
#
# generated by $0 from $SRC
# see repository at http://github.com/cfaerber/Net-IDN-Encode for source files
#
use strict;
use utf8;
use warnings;

BEGIN { binmode STDOUT, ':utf8'; binmode STDERR, ':utf8'; }

use Test::More;
use Net::IDN::Stupid::_Mapping (':all');

no warnings 'utf8';
__EOF
  }
  $cur_part = $part;
}

__END__
